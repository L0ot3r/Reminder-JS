export const react = [
	{
		title: 'Le CSS dans React',
		body: {
			intro: {
				title: 'Introduction',
				text: `Le Style de notre application a un impact tr√®s important sur l'apparence des composants, l‚Äôinteraction utilisateur et son ressenti. Il y a de multiples fa√ßons de styliser notre application React, et nous allons en examiner quelques-unes. Gardes en t√™te qu'il n'y a pas de bonne ou de mauvaise fa√ßon de styliser : utilise la fa√ßon qui s'adapte le mieux √† ton projet ! Nous allons aborder quelques m√©thodes pour styliser une application React, chaque m√©thode sera suivie d'un exemple de mise en pratique.

					C'est parti ! üöÄ`,
			},
			cours: [
				{
					title: 'üñåÔ∏è Le CSS standard',
					body: [
						`C'est la premi√®re m√©thode que nous allons √©voquer pour int√©grer du CSS dans ton application React. Tu es d√©j√† familier avec cette m√©thode, car tu l'utilises d√©j√†.`,

						`üëç Avantages : bonnes performances, facile √† mettre en ≈ìuvre, car tu connais d√©j√† le CSS. S'adapte √©galement bien avec des framework CSS comme Tailwind CSS (tu peux voir le guide d'installation avec CRA [qui marche aussi avec un project vite], ou choisis un autre framework CSS sur State of CSS survey).`,

						`üëé Inconv√©nients : difficile √† maintenir, plus difficile √† faire √©voluer. Impossible de calculer des styles dynamiques.`,

						`- simplement importer ton fichier CSS dans ton composant:`,
					],
					sample: [
						{
							style: 'jsx',
							code: `// Example.js
	import React from 'react';
	import "./App.css";

	export default function App(){
		return <div className="my-class">Hello world</div>
	}`,
						},
					],
					outro: {
						text: [
							`Il est important de mentionner que lorsque tu cr√©es une r√®gle CSS (class ou ID) avec cette m√©thode, elle sera disponible dans toute l'application (pour les autres composants) quand tu importes le fichier.`,

							`Pourquoi className et pas juste class ?`,

							`Parce que l'attribut class est un mot r√©serv√© en JavaScript. Et le JSX utilise du JavaScript.`,
						],
						sample: {
							style: 'css',
							code: `.my-class{
		color: red;
	}`,
						},
					},
				},
				{
					title: 'üé® Int√©grer le CSS',
					body: [
						`Tout comme en HTML, nous pouvons utiliser l'attribut style dans notre application React pour appliquer notre CSS, mais avec quelques l√©g√®res diff√©rences : au lieu d'appliquer des propri√©t√©s avec des classes ou des ID CSS, nous les passons directement aux √©l√©ments JSX en tant qu'objet. De plus, les propri√©t√©s doivent √™tre en camelCase.`,

						`üëç Avantages : comme nous avons affaire √† un objet, nous pouvons l'√©tendre et ajouter d'autres propri√©t√©s, changer les valeurs de mani√®re conditionnelle.`,

						`üëé Inconv√©nients : pas √©volutif, impossible d'utiliser les media queries et les pseudo-classe`,

						`L'exemple suivant, illustre comment nous cr√©ons un composant React (ligne 4), comment nous cr√©ons les styles pour ce composant (ligne 5), et comment appliquer ces styles au composant (ligne 17)`,
					],
					sample: [
						{
							style: 'jsx',
							code: `// InLineStyle.js
	import React from 'react';

	const InLineStyle = () => {
		const container = {
			display: 'flex',
			flexDirection: 'column',
			alignItems: 'center',
			justifyContent: 'center',
			width: '100%',
			padding: '50px',
			color: '#444',
			border: '1px solid #1890ff',
		}

		return (
			<div style={container}>
				<h1 style={{color: '#0d1a26', fontWeight: 400}}>Hey! We're using inline style!</h1>
			</div>
		)
	}

	export default InLineStyle;`,
						},
					],
				},
				{
					title: 'üñºÔ∏è Les Modules CSS',
					body: [
						`Les Modules CSS t'aideront √† faire en sorte que les classes CSS aient une port√©e locale pour un composant, √©vitant ainsi les conflits de noms de classes que tu pourrais r√©p√©ter dans ton application. Tu peux √©galement ajouter des classes globales en utilisant :global devant le nom de la classe.`,

						`Ils sont mis en ≈ìuvre de la m√™me mani√®re que le CSS normal. Tu dois d√©finir un fichier externe (e.g. App.module.css). Importe-le dans ton composant. Et utilise l'attribut className pour d√©finir les classes.`,

						`üëç Avantages : pas de conflit dans les noms de classe,`,

						`üëé Inconv√©nients : difficile de partager le m√™me style entre les composants`,
					],
					sample: [
						{
							style: 'jsx',
							code: `// CssModule.js
	import React from 'react';
	import styles from './css.module.css'

	const CssModule = () => {
		return (
			<div className={styles.container}>
				<h1 className={styles.title}>Example Css Module.</h1>
				<button className={styles.button}>Button</button>
			</div>
		);
	};

	export default CssModule;`,
						},
						{
							style: 'css',
							code: `/* css.module.css */

	.container {
			display: flex;
			flex-wrap: wrap;
			justify-content: space-evenly;
	}

	.title {
			color: red;
			font-weight: 700;
	}

	.button {
			background-color: #000000;
			width: 60px;
	}`,
						},
					],
				},
			],
		},
	},
	{
		title: `üë©‚Äçüè´ React Basics 01 - Qu'est-ce que React ?`,
		body: {
			intro: {
				title: 'Introduction',
				text: `Pour commencer ton voyage dans le monde de React, avant de commencer √† √©crire du code, tu dois comprendre ce qu'est React, son histoire et ce que tu peux construire en l'utilisant.`,
			},
			cours: [
				{
					title: 'üìñ D√©finition',
					body: [
						`React est une biblioth√®que JavaScript open-source construite / maintenue par Facebook ainsi que par une communaut√© de d√©veloppeurs individuels et d'entreprises.`,

						`Son but est de construire des interfaces utilisateurs ou des composants d'interface utilisateur (une prochaine qu√™te expliquera ce que sont les composants).
						React peut √™tre utilis√© comme base pour le d√©veloppement d'applications monopages (Single Page Application - SPA).`,
					],
				},
				{
					title: 'üìï La vie avant React',
					body: [
						`- Avant JavaScript, les navigateurs r√©cup√©raient et affichaient les documents HTML depuis le serveur.`,
						`- Les seules interactions possibles √©taient le click sur les liens et la soumission de formulaires.`,
						`- JavaScript est arriv√© en apportant avec lui la manipulation du DOM, ce qui a permis d'avoir des interfaces utilisateur interactives.`,
						`- La cr√©ation d'applications utilisant les fonctions natives du DOM est fastidieuse et n√©cessite une grande quantit√© de code.`,
						`- Puis vint la naissance des biblioth√®ques front-end telles que React & Angular.`,
					],
				},
				{
					title: 'ü§î Pourquoi devrais-tu utiliser un Framework/biblioth√®que ?',
					body: [
						`- C'est tr√®s rapide. (gr√¢ce √† son DOM virtuel)`,
						`- C'est une des librairies front-end les plus populaires. Du coup, il y a beaucoup d'offres d'emploi disponibles.`,
						`- Cela facilite l'√©criture d'applications √† grande √©chelle,`,
						`- Afin de rendre notre code plus court et plus polyvalent,`,
						`- Afin d'√©tablir une fa√ßon coh√©rente de programmer dans une √©quipe de d√©veloppement en utilisant une biblioth√®que standardis√©e.`,
						`Depuis que Facebook l'a introduit en 2013, React est devenu une biblioth√®que front-end tr√®s populaire.`,
					],
				},
				{
					title: 'üîß Que peux-tu construire avec React ?',
					body: [
						`Avec React, tu peux :`,
						`- Cr√©er ta propre plateforme de streaming comme Netflix`,
						`- Cr√©er un c√©l√®bre r√©seau social`,
						`Et bien d'autres choses encore...`,
					],
				},
				{
					title: '‚òùÔ∏è R√©sum√©',
					body: [
						`- React est utilis√© pour construire des interfaces utilisateur ou des composants d'interface utilisateur`,
						`- Il a √©t√© cr√©√© pour permettre une programmation coh√©rente`,
						`- Avant React, les sites Web √©taient interactifs en utilisant la manipulation du DOM en JavaScript`,
					],
				},
			],
		},
	},
	{
		title: `üë©‚Äçüè´ React Basics 02 - Qu'est-ce qu'un composant ?`,
		body: {
			intro: {
				title: 'Introduction',
				text: `Dans la qu√™te pr√©c√©dente, tu as d√©couvert ce qu'est React.

				Avant de commencer √† coder et √† t'entra√Æner, nous avons un petit pas √† faire.
				
				Nous devons apprendre ce qu'est un composant React, la philosophie de React ainsi que la hi√©rarchie de notre application.
				
				D√©butons !`,
			},
			cours: [
				{
					title: `Qu'est-ce qu'un composant ?`,
					body: [
						`- Il s'agit essentiellement de blocs qui composent une application.`,
						`- Le terme "composant" est utilis√© pour d√©signer un √©l√©ment ou une section d'une page, comme le montre l'image ci-dessous.`,
						`- Ils divisent et isolent les √©l√©ments au sein de l'interface utilisateur √† des fins visuelles et comportementales.`,
						`- Un composant peut √™tre d√©compos√© davantage et contenir d'autres composants pour constituer des pages comme dans l'image ci-dessous.`,
						`- L'image contient de multiples composants qui constituent un composant page, par exemple une page d'accueil.`,
					],
					img: ''
				},
				{
					title: 'Hi√©rarchie des composants',
					body: [
						`- Dans React, il y a une hi√©rarchie lors de la construction d'une application.`,
						`- Typiquement, dans la plupart des applications, nous avons un composant racine appel√© App, c'est l√† que tous les autres composants finissent par atteindre l'arbre des composants.`,
						`- Comme on peut le voir dans le composant App, il y a un composant enfant appel√© contacts.`,
						`- Contacts contient les composants enfants suivants AddContact, ContactList & SearchBar.`,
						`- AddContact contient un composant enfant AddContactForm.`,
						`- ContactList contient aussi un composant enfant ContactCard.`,
					],
				},
				{
					title: 'Hi√©rarchie des composants 2',
					body: [
						`Lorsque des composants sont contenus dans d'autres composants plus haut dans l'arbre (par exemple ContactList contient la ContactCard), il s'agit de relations parent (ContactList) et enfant (ContactCard).
						Elles sont un √©l√©ment cl√© de la construction d'applications React coh√©rentes et √©volutives.`,
						`Tous les composants peuvent √™tre les parents ou les enfants d'un autre composant (√† l'exception de App, qui ne peut √™tre que le parent).`,
					],
				},
			],
		},
	},
];
